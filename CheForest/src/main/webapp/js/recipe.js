/* CheForest Recipe Page JavaScript */
/* Î†àÏãúÌîº ÌéòÏù¥ÏßÄ Ï†ÑÏö© JavaScript (Ïπ¥ÌÖåÍ≥†Î¶¨ + Ïπ¥Îìú ÌïÑÌÑ∞ÎßÅ + Í≤ÄÏÉâ) */

// Ï†ÑÏó≠ Î≥ÄÏàò
let selectedCategory = 'all';
let searchQuery = '';
let sortBy = 'popularity';

// ‚úÖ Ïπ¥ÌÖåÍ≥†Î¶¨ Ï†ïÏùò (ÏàúÏÑú Í≥†Ï†ï)
const recipeCategories = [
    { id: 'all', name: 'Ï†ÑÏ≤¥', icon: 'üçΩÔ∏è', color: 'bg-gray-100 text-gray-800' },
    { id: 'ÌïúÏãù', name: 'ÌïúÏãù', icon: 'ü•¢', color: 'korean' },
    { id: 'ÏñëÏãù', name: 'ÏñëÏãù', icon: 'üçù', color: 'western' },
    { id: 'Ï§ëÏãù', name: 'Ï§ëÏãù', icon: 'ü•ü', color: 'chinese' },
    { id: 'ÏùºÏãù', name: 'ÏùºÏãù', icon: 'üç£', color: 'japanese' },
    { id: 'ÎîîÏ†ÄÌä∏', name: 'ÎîîÏ†ÄÌä∏', icon: 'üßÅ', color: 'dessert' }
];

// ====== Ïπ¥Îìú ÌïÑÌÑ∞ÎßÅ Í¥ÄÎ†® ======
function getRecipeCards() {
    const popularCards = Array.from(document.querySelectorAll('#popularGrid .popular-recipe-card'));
    const regularCards = Array.from(document.querySelectorAll('#regularGrid .recipe-card'));
    return { popular: popularCards, regular: regularCards, all: [...popularCards, ...regularCards] };
}

function shouldShowRecipeCard(card) {
    const category = card.dataset.category;
    const title = card.dataset.title?.toLowerCase() || '';
    const description = card.dataset.description?.toLowerCase() || '';
    const matchesCategory = selectedCategory === 'all' || category === selectedCategory;
    const searchLower = searchQuery.toLowerCase();
    const matchesSearch = !searchQuery || title.includes(searchLower) || description.includes(searchLower);
    return matchesCategory && matchesSearch;
}

function sortRecipeCards(cards) {
    return cards.sort((a, b) => {
        const aLikes = parseInt(a.dataset.likes) || 0;
        const bLikes = parseInt(b.dataset.likes) || 0;
        const aViews = parseInt(a.dataset.views) || 0;
        const bViews = parseInt(b.dataset.views) || 0;
        const aCreated = new Date(a.dataset.created).getTime();
        const bCreated = new Date(b.dataset.created).getTime();
        switch (sortBy) {
            case 'popularity': return bLikes - aLikes;
            case 'views': return bViews - aViews;
            case 'newest': return bCreated - aCreated;
            default: return 0;
        }
    });
}

// ====== Ïπ¥ÌÖåÍ≥†Î¶¨ Î†åÎçîÎßÅ ======
function renderRecipeCategories(counts = {}) {
    const container = document.getElementById('recipeCategoryButtons');
    if (!container) return;

    container.innerHTML = recipeCategories.map(cat => {
        const isActive = selectedCategory === cat.id;
        const count = counts[cat.id] ?? 0;

        // Ïù¥Îèô URL
        const url = cat.id === 'all'
            ? '/recipe/list'
            : `/recipe/list?categoryKr=${encodeURIComponent(cat.id)}`;

        return `
        <a href="${url}"
            class="w-full flex items-center justify-between px-4 py-2 rounded-lg border transition-all
                ${isActive
            ? 'active bg-gradient-to-r from-pink-500 to-orange-500 text-white border-transparent shadow-lg'
            : 'bg-white border-gray-200 hover:border-orange-300 hover:bg-orange-50 text-gray-700'}">
            <span class="flex items-center space-x-2">
                <span>${cat.icon}</span>
                <span>${cat.name}</span>
            </span>
            <span class="text-xs px-2 py-0.5 rounded-full
                ${isActive ? 'bg-white/20 text-white' : 'bg-gray-100 text-gray-700'}">
                ${count}
            </span>
        </a>`;
    }).join('');
}

// ====== Ïπ¥Îìú Î†åÎçîÎßÅ ======
function renderPopularRecipes() {
    const cards = getRecipeCards();
    const popularSection = document.getElementById('popularSection');
    const popularCount = document.getElementById('popularCount');
    let visibleCount = 0;
    cards.popular.forEach(card => {
        if (shouldShowRecipeCard(card)) { card.style.display = 'block'; visibleCount++; }
        else card.style.display = 'none';
    });
    if (visibleCount > 0) {
        popularSection.style.display = 'block';
        popularCount.textContent = `TOP ${visibleCount}`;
    } else {
        popularSection.style.display = 'none';
    }
}

function renderRegularRecipes() {
    const cards = getRecipeCards();
    const regularCount = document.getElementById('regularCount');
    const visibleCards = cards.regular.filter(card => shouldShowRecipeCard(card));
    const sortedCards = sortRecipeCards([...visibleCards]);
    cards.regular.forEach(card => card.style.display = 'none');
    const regularGrid = document.getElementById('regularGrid');
    if (regularGrid && sortedCards.length > 0) {
        sortedCards.forEach(card => {
            card.style.display = 'block';
            regularGrid.appendChild(card);
        });
    }
    regularCount.textContent = `${visibleCards.length}Í∞ú`;
}

// ====== Í≤∞Í≥º ÏóÜÏùå ======
function toggleNoResultsSection() {
    const cards = getRecipeCards();
    const noResultsSection = document.getElementById('noResultsSection');
    const loadMoreSection = document.getElementById('loadMoreSection');
    const visiblePopular = cards.popular.filter(card => shouldShowRecipeCard(card)).length;
    const visibleRegular = cards.regular.filter(card => shouldShowRecipeCard(card)).length;
    if (visiblePopular === 0 && visibleRegular === 0) {
        noResultsSection.style.display = 'block';
        if (loadMoreSection) loadMoreSection.style.display = 'none';
    } else {
        noResultsSection.style.display = 'none';
        if (loadMoreSection) loadMoreSection.style.display = 'block';
    }
}

// ====== Í∞úÏàò Í∞±Ïã† ======
function updateRecipeCount() {
    fetch('/recipe/counts')
        .then(res => res.json())
        .then(data => {
            renderRecipeCategories(data);
        })
        .catch(err => {
            console.error('Î†àÏãúÌîº Ïπ¥Ïö¥Ìä∏ Î°úÎìú Ïã§Ìå®:', err);
            renderRecipeCategories(); // Ïã§Ìå® Ïãú 0 ÌëúÏãú
        });
}

// ====== ÎèôÏûë Ï†úÏñ¥ ======
function switchRecipeCategory(categoryId) {
    selectedCategory = categoryId;
    updateRecipeContent();
}

function handleRecipeSearch() {
    const input = document.getElementById('recipeSearchInput');
    if (input) {
        searchQuery = input.value.trim();
        updateRecipeContent();
    }
}

function updateRecipeContent() {
    updateRecipeCount();
    renderPopularRecipes();
    renderRegularRecipes();
    toggleNoResultsSection();
}

// ====== Ï¥àÍ∏∞Ìôî ======
function initializeRecipePage() {
    const c = new URLSearchParams(location.search).get('categoryKr');
    if (c) selectedCategory = decodeURIComponent(c);

    updateRecipeCount();
    console.log('‚úÖ Î†àÏãúÌîº ÌéòÏù¥ÏßÄ Ï¥àÍ∏∞Ìôî ÏôÑÎ£å! (Ïπ¥ÌÖåÍ≥†Î¶¨ + Ïπ¥Ïö¥Ìä∏ + ÎßÅÌÅ¨)');
}

function setupRecipeSearchEvents() {
    const input = document.getElementById('recipeSearchInput');
    if (!input) return;
    let t;
    input.addEventListener('input', e => {
        clearTimeout(t);
        t = setTimeout(handleRecipeSearch, 300);
    });
    input.addEventListener('keydown', e => {
        if (e.key === 'Enter') {
            clearTimeout(t);
            handleRecipeSearch();
        }
    });
}

document.addEventListener('DOMContentLoaded', initializeRecipePage);

// Ï†ÑÏó≠ Îì±Î°ù
window.CheForest = window.CheForest || {};
window.CheForest.recipe = { switchRecipeCategory, handleRecipeSearch, updateRecipeContent };
